/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&kp LCTRL>;
            key-positions = <0 10>;
        };

        b {
            bindings = <&kp LEFT_ALT>;
            key-positions = <11 1>;
        };

        c {
            bindings = <&kp LSHIFT>;
            key-positions = <2 12>;
        };

        d {
            bindings = <&kp LGUI>;
            key-positions = <3 13>;
        };

        e {
            bindings = <&kp ESC>;
            key-positions = <4 14>;
        };

        f {
            bindings = <&kp ENTER>;
            key-positions = <5 15>;
        };

        g {
            bindings = <&kp RGUI>;
            key-positions = <6 16>;
        };

        h {
            bindings = <&kp RSHFT>;
            key-positions = <17 7>;
        };

        i {
            bindings = <&kp RALT>;
            key-positions = <8 18>;
        };

        j {
            bindings = <&kp RCTRL>;
            key-positions = <19 9>;
        };

        k {
            bindings = <&kp LCTRL>;
            key-positions = <13 23>;
        };

        l {
            bindings = <&kp RCTRL>;
            key-positions = <16 26>;
        };

        e_bis {
            bindings = <&kp ESC>;
            key-positions = <17 27>;
        };

        f_bis {
            bindings = <&kp ENTER>;
            key-positions = <12 22>;
        };
    };

    macros {
        hide: hide {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(H)>;
            label = "HIDE";
        };

        password: password {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(R) &kp L &kp N4 &kp N1 &kp LS(H) &kp K &kp N4 &kp N9 &kp AMPS &kp STAR>;
            label = "PASSWORD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwert {
            bindings = <
  &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y            &kp U  &kp I          &kp O    &kp P
  &kp A  &kp S  &kp D         &kp F  &kp G        &kp H            &kp J  &kp K          &kp L    &kp SEMI
  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N            &kp M  &kp COMMA      &kp DOT  &kp FSLH
                &kp LEFT_GUI  &mo 1  &kp SPACE    &kp RIGHT_SHIFT  &mo 2  &kp RIGHT_ALT
            >;
        };

        num {
            bindings = <
  &kp N1                &kp N2                &kp N3    &kp N4     &kp N5          &kp N6             &kp N7    &kp N8             &kp N9          &kp N0
  &kp BACKSPACE         &kp TAB               &kp LEFT  &kp RIGHT  &kp UP_ARROW    &kp DOUBLE_QUOTES  &kp LBKT  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE
  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &hide     &password  &kp DOWN        &kp SQT            &none     &none              &kp PIPE        &kp BACKSLASH
                                              &trans    &trans     &trans          &trans             &mo 3     &trans
            >;
        };

        sym {
            bindings = <
  &kp LS(N1)     &kp LS(N2)  &kp LS(N3)            &kp LS(N4)             &kp LS(N5)    &kp LS(N6)  &kp LS(N7)        &kp LS(N8)  &kp LS(N9)         &kp LS(N0)
  &kp BACKSPACE  &kp TAB     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none         &none       &kp UNDERSCORE    &kp PLUS    &kp MINUS          &kp EQUAL
  &kp GRAVE      &kp TILDE   &none                 &none                  &none         &none       &kp SINGLE_QUOTE  &none       &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
                             &trans                &mo 3                  &trans        &trans      &trans            &trans
            >;
        };

        arrow {
            bindings = <
  &trans  &trans  &trans  &trans  &trans         &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &bt BT_CLR     &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &bootloader    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans         &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
